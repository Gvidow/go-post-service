// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/gvidow/go-post-service/internal/entity"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockRepository) AddComment(arg0 context.Context, arg1 *entity.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddComment indicates an expected call of AddComment.
func (mr *MockRepositoryMockRecorder) AddComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockRepository)(nil).AddComment), arg0, arg1)
}

// AddPost mocks base method.
func (m *MockRepository) AddPost(arg0 context.Context, arg1 *entity.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPost indicates an expected call of AddPost.
func (mr *MockRepositoryMockRecorder) AddPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPost", reflect.TypeOf((*MockRepository)(nil).AddPost), arg0, arg1)
}

// AddReply mocks base method.
func (m *MockRepository) AddReply(arg0 context.Context, arg1 *entity.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReply", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReply indicates an expected call of AddReply.
func (mr *MockRepositoryMockRecorder) AddReply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReply", reflect.TypeOf((*MockRepository)(nil).AddReply), arg0, arg1)
}

// GetComments mocks base method.
func (m *MockRepository) GetComments(ctx context.Context, postIds []int, cfg entity.QueryConfig) (entity.BatchComments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", ctx, postIds, cfg)
	ret0, _ := ret[0].(entity.BatchComments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments.
func (mr *MockRepositoryMockRecorder) GetComments(ctx, postIds, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockRepository)(nil).GetComments), ctx, postIds, cfg)
}

// GetFeedPosts mocks base method.
func (m *MockRepository) GetFeedPosts(ctx context.Context, limit, cursor int) (*entity.FeedPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedPosts", ctx, limit, cursor)
	ret0, _ := ret[0].(*entity.FeedPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedPosts indicates an expected call of GetFeedPosts.
func (mr *MockRepositoryMockRecorder) GetFeedPosts(ctx, limit, cursor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedPosts", reflect.TypeOf((*MockRepository)(nil).GetFeedPosts), ctx, limit, cursor)
}

// GetPostByComment mocks base method.
func (m *MockRepository) GetPostByComment(ctx context.Context, id int) (*entity.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByComment", ctx, id)
	ret0, _ := ret[0].(*entity.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByComment indicates an expected call of GetPostByComment.
func (mr *MockRepositoryMockRecorder) GetPostByComment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByComment", reflect.TypeOf((*MockRepository)(nil).GetPostByComment), ctx, id)
}

// GetPostById mocks base method.
func (m *MockRepository) GetPostById(ctx context.Context, id int) (*entity.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostById", ctx, id)
	ret0, _ := ret[0].(*entity.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostById indicates an expected call of GetPostById.
func (mr *MockRepositoryMockRecorder) GetPostById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostById", reflect.TypeOf((*MockRepository)(nil).GetPostById), ctx, id)
}

// GetReplies mocks base method.
func (m *MockRepository) GetReplies(ctx context.Context, commentId int, cfg entity.QueryConfig) (*entity.FeedComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplies", ctx, commentId, cfg)
	ret0, _ := ret[0].(*entity.FeedComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplies indicates an expected call of GetReplies.
func (mr *MockRepositoryMockRecorder) GetReplies(ctx, commentId, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplies", reflect.TypeOf((*MockRepository)(nil).GetReplies), ctx, commentId, cfg)
}

// SetPermAddComments mocks base method.
func (m *MockRepository) SetPermAddComments(ctx context.Context, postId int, allow bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPermAddComments", ctx, postId, allow)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPermAddComments indicates an expected call of SetPermAddComments.
func (mr *MockRepositoryMockRecorder) SetPermAddComments(ctx, postId, allow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPermAddComments", reflect.TypeOf((*MockRepository)(nil).SetPermAddComments), ctx, postId, allow)
}

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// PublishComment mocks base method.
func (m *MockNotifier) PublishComment(ctx context.Context, comment *entity.Comment, postId int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishComment", ctx, comment, postId)
}

// PublishComment indicates an expected call of PublishComment.
func (mr *MockNotifierMockRecorder) PublishComment(ctx, comment, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishComment", reflect.TypeOf((*MockNotifier)(nil).PublishComment), ctx, comment, postId)
}

// RegistryChanNotifier mocks base method.
func (m *MockNotifier) RegistryChanNotifier(ctx context.Context, ch chan<- entity.NotifyComment, postId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistryChanNotifier", ctx, ch, postId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegistryChanNotifier indicates an expected call of RegistryChanNotifier.
func (mr *MockNotifierMockRecorder) RegistryChanNotifier(ctx, ch, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistryChanNotifier", reflect.TypeOf((*MockNotifier)(nil).RegistryChanNotifier), ctx, ch, postId)
}
