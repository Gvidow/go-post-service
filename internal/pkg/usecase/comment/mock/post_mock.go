// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/gvidow/go-post-service/internal/entity"
	post "github.com/gvidow/go-post-service/internal/pkg/usecase/post"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockRepository) AddComment(arg0 context.Context, arg1 *entity.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddComment indicates an expected call of AddComment.
func (mr *MockRepositoryMockRecorder) AddComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockRepository)(nil).AddComment), arg0, arg1)
}

// AddReply mocks base method.
func (m *MockRepository) AddReply(arg0 context.Context, arg1 *entity.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReply", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReply indicates an expected call of AddReply.
func (mr *MockRepositoryMockRecorder) AddReply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReply", reflect.TypeOf((*MockRepository)(nil).AddReply), arg0, arg1)
}

// GetComments mocks base method.
func (m *MockRepository) GetComments(ctx context.Context, postIds []int, cfg entity.QueryConfig) (entity.BatchComments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", ctx, postIds, cfg)
	ret0, _ := ret[0].(entity.BatchComments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments.
func (mr *MockRepositoryMockRecorder) GetComments(ctx, postIds, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockRepository)(nil).GetComments), ctx, postIds, cfg)
}

// GetReplies mocks base method.
func (m *MockRepository) GetReplies(ctx context.Context, commentId int, cfg entity.QueryConfig) (*entity.FeedComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplies", ctx, commentId, cfg)
	ret0, _ := ret[0].(*entity.FeedComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplies indicates an expected call of GetReplies.
func (mr *MockRepositoryMockRecorder) GetReplies(ctx, commentId, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplies", reflect.TypeOf((*MockRepository)(nil).GetReplies), ctx, commentId, cfg)
}

// MockpostGetter is a mock of postGetter interface.
type MockpostGetter struct {
	ctrl     *gomock.Controller
	recorder *MockpostGetterMockRecorder
}

// MockpostGetterMockRecorder is the mock recorder for MockpostGetter.
type MockpostGetterMockRecorder struct {
	mock *MockpostGetter
}

// NewMockpostGetter creates a new mock instance.
func NewMockpostGetter(ctrl *gomock.Controller) *MockpostGetter {
	mock := &MockpostGetter{ctrl: ctrl}
	mock.recorder = &MockpostGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpostGetter) EXPECT() *MockpostGetterMockRecorder {
	return m.recorder
}

// GetPostByEntity mocks base method.
func (m *MockpostGetter) GetPostByEntity(r post.Request) (*entity.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByEntity", r)
	ret0, _ := ret[0].(*entity.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByEntity indicates an expected call of GetPostByEntity.
func (mr *MockpostGetterMockRecorder) GetPostByEntity(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByEntity", reflect.TypeOf((*MockpostGetter)(nil).GetPostByEntity), r)
}
