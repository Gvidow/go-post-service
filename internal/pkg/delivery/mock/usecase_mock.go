// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/gvidow/go-post-service/internal/entity"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// AllowCommenting mocks base method.
func (m *MockUsecase) AllowCommenting(ctx context.Context, author string, postId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowCommenting", ctx, author, postId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllowCommenting indicates an expected call of AllowCommenting.
func (mr *MockUsecaseMockRecorder) AllowCommenting(ctx, author, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowCommenting", reflect.TypeOf((*MockUsecase)(nil).AllowCommenting), ctx, author, postId)
}

// GetFeedPosts mocks base method.
func (m *MockUsecase) GetFeedPosts(ctx context.Context, limit, cursor int) (*entity.FeedPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedPosts", ctx, limit, cursor)
	ret0, _ := ret[0].(*entity.FeedPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedPosts indicates an expected call of GetFeedPosts.
func (mr *MockUsecaseMockRecorder) GetFeedPosts(ctx, limit, cursor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedPosts", reflect.TypeOf((*MockUsecase)(nil).GetFeedPosts), ctx, limit, cursor)
}

// GetPost mocks base method.
func (m *MockUsecase) GetPost(ctx context.Context, postId int) (*entity.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", ctx, postId)
	ret0, _ := ret[0].(*entity.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockUsecaseMockRecorder) GetPost(ctx, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockUsecase)(nil).GetPost), ctx, postId)
}

// GetReplies mocks base method.
func (m *MockUsecase) GetReplies(ctx context.Context, commentId, limit, cursor, depth int) (*entity.FeedComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplies", ctx, commentId, limit, cursor, depth)
	ret0, _ := ret[0].(*entity.FeedComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplies indicates an expected call of GetReplies.
func (mr *MockUsecaseMockRecorder) GetReplies(ctx, commentId, limit, cursor, depth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplies", reflect.TypeOf((*MockUsecase)(nil).GetReplies), ctx, commentId, limit, cursor, depth)
}

// ProhibitCommenting mocks base method.
func (m *MockUsecase) ProhibitCommenting(ctx context.Context, author string, postId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProhibitCommenting", ctx, author, postId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProhibitCommenting indicates an expected call of ProhibitCommenting.
func (mr *MockUsecaseMockRecorder) ProhibitCommenting(ctx, author, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProhibitCommenting", reflect.TypeOf((*MockUsecase)(nil).ProhibitCommenting), ctx, author, postId)
}

// PublishPost mocks base method.
func (m *MockUsecase) PublishPost(arg0 context.Context, arg1 *entity.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishPost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishPost indicates an expected call of PublishPost.
func (mr *MockUsecaseMockRecorder) PublishPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishPost", reflect.TypeOf((*MockUsecase)(nil).PublishPost), arg0, arg1)
}

// SubscribeOnPost mocks base method.
func (m *MockUsecase) SubscribeOnPost(ctx context.Context, postId int) (<-chan entity.NotifyComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeOnPost", ctx, postId)
	ret0, _ := ret[0].(<-chan entity.NotifyComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeOnPost indicates an expected call of SubscribeOnPost.
func (mr *MockUsecaseMockRecorder) SubscribeOnPost(ctx, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeOnPost", reflect.TypeOf((*MockUsecase)(nil).SubscribeOnPost), ctx, postId)
}

// WriteComment mocks base method.
func (m *MockUsecase) WriteComment(arg0 context.Context, arg1 *entity.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteComment indicates an expected call of WriteComment.
func (mr *MockUsecaseMockRecorder) WriteComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteComment", reflect.TypeOf((*MockUsecase)(nil).WriteComment), arg0, arg1)
}

// WriteReply mocks base method.
func (m *MockUsecase) WriteReply(arg0 context.Context, arg1 *entity.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteReply", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteReply indicates an expected call of WriteReply.
func (mr *MockUsecaseMockRecorder) WriteReply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteReply", reflect.TypeOf((*MockUsecase)(nil).WriteReply), arg0, arg1)
}

// MockpostUsecase is a mock of postUsecase interface.
type MockpostUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockpostUsecaseMockRecorder
}

// MockpostUsecaseMockRecorder is the mock recorder for MockpostUsecase.
type MockpostUsecaseMockRecorder struct {
	mock *MockpostUsecase
}

// NewMockpostUsecase creates a new mock instance.
func NewMockpostUsecase(ctrl *gomock.Controller) *MockpostUsecase {
	mock := &MockpostUsecase{ctrl: ctrl}
	mock.recorder = &MockpostUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpostUsecase) EXPECT() *MockpostUsecaseMockRecorder {
	return m.recorder
}

// AllowCommenting mocks base method.
func (m *MockpostUsecase) AllowCommenting(ctx context.Context, author string, postId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowCommenting", ctx, author, postId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllowCommenting indicates an expected call of AllowCommenting.
func (mr *MockpostUsecaseMockRecorder) AllowCommenting(ctx, author, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowCommenting", reflect.TypeOf((*MockpostUsecase)(nil).AllowCommenting), ctx, author, postId)
}

// GetFeedPosts mocks base method.
func (m *MockpostUsecase) GetFeedPosts(ctx context.Context, limit, cursor int) (*entity.FeedPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedPosts", ctx, limit, cursor)
	ret0, _ := ret[0].(*entity.FeedPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedPosts indicates an expected call of GetFeedPosts.
func (mr *MockpostUsecaseMockRecorder) GetFeedPosts(ctx, limit, cursor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedPosts", reflect.TypeOf((*MockpostUsecase)(nil).GetFeedPosts), ctx, limit, cursor)
}

// GetPost mocks base method.
func (m *MockpostUsecase) GetPost(ctx context.Context, postId int) (*entity.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", ctx, postId)
	ret0, _ := ret[0].(*entity.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockpostUsecaseMockRecorder) GetPost(ctx, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockpostUsecase)(nil).GetPost), ctx, postId)
}

// ProhibitCommenting mocks base method.
func (m *MockpostUsecase) ProhibitCommenting(ctx context.Context, author string, postId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProhibitCommenting", ctx, author, postId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProhibitCommenting indicates an expected call of ProhibitCommenting.
func (mr *MockpostUsecaseMockRecorder) ProhibitCommenting(ctx, author, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProhibitCommenting", reflect.TypeOf((*MockpostUsecase)(nil).ProhibitCommenting), ctx, author, postId)
}

// PublishPost mocks base method.
func (m *MockpostUsecase) PublishPost(arg0 context.Context, arg1 *entity.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishPost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishPost indicates an expected call of PublishPost.
func (mr *MockpostUsecaseMockRecorder) PublishPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishPost", reflect.TypeOf((*MockpostUsecase)(nil).PublishPost), arg0, arg1)
}

// SubscribeOnPost mocks base method.
func (m *MockpostUsecase) SubscribeOnPost(ctx context.Context, postId int) (<-chan entity.NotifyComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeOnPost", ctx, postId)
	ret0, _ := ret[0].(<-chan entity.NotifyComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeOnPost indicates an expected call of SubscribeOnPost.
func (mr *MockpostUsecaseMockRecorder) SubscribeOnPost(ctx, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeOnPost", reflect.TypeOf((*MockpostUsecase)(nil).SubscribeOnPost), ctx, postId)
}

// MockcommentUsecase is a mock of commentUsecase interface.
type MockcommentUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockcommentUsecaseMockRecorder
}

// MockcommentUsecaseMockRecorder is the mock recorder for MockcommentUsecase.
type MockcommentUsecaseMockRecorder struct {
	mock *MockcommentUsecase
}

// NewMockcommentUsecase creates a new mock instance.
func NewMockcommentUsecase(ctrl *gomock.Controller) *MockcommentUsecase {
	mock := &MockcommentUsecase{ctrl: ctrl}
	mock.recorder = &MockcommentUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcommentUsecase) EXPECT() *MockcommentUsecaseMockRecorder {
	return m.recorder
}

// GetReplies mocks base method.
func (m *MockcommentUsecase) GetReplies(ctx context.Context, commentId, limit, cursor, depth int) (*entity.FeedComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplies", ctx, commentId, limit, cursor, depth)
	ret0, _ := ret[0].(*entity.FeedComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplies indicates an expected call of GetReplies.
func (mr *MockcommentUsecaseMockRecorder) GetReplies(ctx, commentId, limit, cursor, depth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplies", reflect.TypeOf((*MockcommentUsecase)(nil).GetReplies), ctx, commentId, limit, cursor, depth)
}

// WriteComment mocks base method.
func (m *MockcommentUsecase) WriteComment(arg0 context.Context, arg1 *entity.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteComment indicates an expected call of WriteComment.
func (mr *MockcommentUsecaseMockRecorder) WriteComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteComment", reflect.TypeOf((*MockcommentUsecase)(nil).WriteComment), arg0, arg1)
}

// WriteReply mocks base method.
func (m *MockcommentUsecase) WriteReply(arg0 context.Context, arg1 *entity.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteReply", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteReply indicates an expected call of WriteReply.
func (mr *MockcommentUsecaseMockRecorder) WriteReply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteReply", reflect.TypeOf((*MockcommentUsecase)(nil).WriteReply), arg0, arg1)
}
